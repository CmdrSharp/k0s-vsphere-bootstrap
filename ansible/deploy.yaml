---

- name: "Deploy K0S Cluster"
  hosts: localhost
  gather_facts: no
  vars:
    ansible_host_key_checking: false
  vars_files:
    - vaults/vault.yaml
  remote_user: "{{ host.vm_user }}"
  tasks:
    - name: "Generate tfvars file for Terraform"
      blockinfile:
        path: ../terraform/input.tfvars
        create: yes
        block: |
          vsphere_server = "{{ vcenter.host }}"
          vsphere_username = "{{ vcenter.username }}"
          vsphere_password = "{{ vcenter.password }}"
          datacenter = "{{ vcenter.datacenter }}"
          resource_pool = "{{ vcenter.resource_pool }}"
          cluster = "{{ vcenter.cluster }}"
          cp_vm_params = {
            hostname = "{{ host.controlplane.hostname }}"
            domain = "{{ host.controlplane.domain }}"
            vcpu = "{{ host.controlplane.vcpu }}"
            ram = "{{ host.controlplane.ram }}"
            disk_datastore = "{{ host.controlplane.disk_datastore }}"
            disk_size = "{{ host.controlplane.disk_size }}"
            network_name = "{{ host.controlplane.network_name }}"
          }
          worker_vm_params = {
            hostname = "{{ host.worker.hostname }}"
            domain = "{{ host.worker.domain }}"
            vcpu = "{{ host.worker.vcpu }}"
            ram = "{{ host.worker.ram }}"
            disk_datastore = "{{ host.worker.disk_datastore }}"
            disk_size = "{{ host.worker.disk_size }}"
            network_name = "{{ host.worker.network_name }}"
          }
          lb_vm_params = {
            hostname = "{{ host.lb.hostname }}"
            domain = "{{ host.lb.domain }}"
            vcpu = "{{ host.lb.vcpu }}"
            ram = "{{ host.lb.ram }}"
            disk_datastore = "{{ host.lb.disk_datastore }}"
            disk_size = "{{ host.lb.disk_size }}"
            network_name = "{{ host.lb.network_name }}"
          }
          template_properties = {
            "public-keys" = "{{ host.ssh_public_key }}"
          }
          cp_vm_count = "{{ kubernetes.controlplane.count }}"
          worker_vm_count = "{{ kubernetes.worker.count }}"

    - name: "Create VM's"
      community.general.terraform:
        project_path: "../terraform/"
        state: present
        force_init: yes
        variables_file:
          - input.tfvars
      delegate_to: localhost
      register: terraform_output

    - name: "Delete tfvars file"
      file:
        path: ../terraform/input.tfvars
        state: absent

    - block:
      - name: "Set facts for Load Balancer (if deployed)"
        set_fact:
          api:
            external_address: "{{ terraform_output.outputs.lb_ip_addresses.value[0] }}"
            sans:
            - "{{ terraform_output.outputs.lb_ip_addresses.value[0] }}"

      - name: "Show LB Config"
        debug:
          msg: "{{ terraform_output.outputs }}"

      - name: "Add LoadBalancer to in-memory hosts"
        add_host:
          hostname: '{{ terraform_output.outputs.lb_ip_addresses.value[0] }}'

      - name: "Install HAProxy"
        apt:
          name: haproxy
          update_cache: yes
          state: present
        become: yes
        delegate_to: '{{ terraform_output.outputs.lb_ip_addresses.value[0] }}'

      - name: "Update HAProxy Configuration"
        template:
          src: haproxy.cfg.j2
          dest: /etc/haproxy/haproxy.cfg
        become: yes
        delegate_to: '{{ terraform_output.outputs.lb_ip_addresses.value[0] }}'

      - name: "Ensure HAProxy is enabled and started"
        service:
          name: haproxy
          state: restarted
          enabled: yes
        become: yes
        delegate_to: '{{ terraform_output.outputs.lb_ip_addresses.value[0] }}'
      when: terraform_output.outputs.lb_ip_addresses.value | length > 0

    - name: "Generate k0sctl config"
      template:
        src: k0sctl.yaml.j2
        dest: ../k0sctl.yaml

    - name: "Add Worker information to k0sctl config"
      blockinfile:
        path: ../k0sctl.yaml
        insertafter: "hosts"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item }}"
        block: |4
              - ssh:
                  address: {{ item }}
                  user: {{ host.vm_user }}
                  port: 22
                  keyPath: {{ host.ssh_private_key_path }}
                installFlags:
                  - --enable-cloud-provider
                  - --kubelet-extra-args
                  - --cloud-provider=external
                role: worker
      with_items: "{{ terraform_output.outputs.worker_ip_addresses.value }}"

    - name: "Add ControlPlane information to k0sctl config"
      blockinfile:
        path: ../k0sctl.yaml
        insertafter: "hosts"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item }}"
        block: |4
              - ssh:
                  address: {{ item }}
                  user: {{ host.vm_user }}
                  port: 22
                  keyPath: {{ host.ssh_private_key_path }}
                installFlags:
                  - --enable-cloud-provider
                  - --kubelet-extra-args
                  - --cloud-provider=external
                role: controller+worker
      with_items: "{{ terraform_output.outputs.controlplane_ip_addresses.value }}"

    - name: "Initiate creation of k0s"
      shell: k0sctl apply --config ../k0sctl.yaml

    - name: "Save kubeconfig file"
      shell: k0sctl kubeconfig > ../kubeconfig